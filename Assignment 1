#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <string.h>
#include <sys/wait.h>

#define numMaxChild 5

int child_pids[numMaxChild];
int numChild = 0;
int pipefd[numMaxChild][2];

void handle_interrupt(int sig) {
    printf("Interrupt occured. Ending all child processes...\n");
    for (int i = 0; i < numChild; i++) {
        kill(child_pids[i], SIGTERM);
    }
    exit(0);
}

int main() {
    signal(SIGINT, handle_interrupt);

    int num_to_spawn;
    printf("How many child processes? (no. of limit=%d): ", numMaxChild);
    scanf("%d", &num_to_spawn);
    if (num_to_spawn > numMaxChild) {
        printf("Error: maximum number of children have reached the limits. Exiting.\n");
        return 1;
    }

    for (int i = 0; i < num_to_spawn; i++) {
        if (pipe(pipefd[i]) == -1) {
            printf("Error: failed to create pipe. Exiting.\n");
            return 1;
        }
        pid_t child_pid = fork();
        if (child_pid == -1) {
            printf("Error: failed to fork. Exiting.\n");
            return 1;
        } else if (child_pid == 0) {
            close(pipefd[i][1]);
            char buf[1024];
            while (read(pipefd[i][0], buf, sizeof(buf)) > 0) {
                printf("Child %d: %s", i+1, buf);
            }
            close(pipefd[i][0]);
            exit(0);
        } else {
            child_pids[i] = child_pid;
            numChild++;
            close(pipefd[i][0]);
        }
    }

    char input[1024];
    while (1) {
        printf("Enter a message to send for child processes (Enter'q'= quit): \n");
        fgets(input, sizeof(input), stdin);
        if (strcmp(input, "q\n") == 0) {
            break;
        }
        for (int i = 0; i < numChild; i++) {
            write(pipefd[i][1], input, strlen(input));
        }
    }

    for (int i = 0; i < numChild; i++) {
        close(pipefd[i][1]);
        wait(NULL);
    }
    printf("All child processes finished. Exiting...\n");
    return 0;
}
